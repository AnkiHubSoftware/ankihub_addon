name: tests
env:
  COMPOSE_DOCKER_CLI_BUILD: 1
  WEBAPP_COMPOSE_FILE: ${{ github.workspace }}/ankihub_web/compose.yml
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

on:
  push:
    branches:
      - "main"
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Checkout ankihub_addon
        uses: actions/checkout@v3

      - name: Get pip cache dir
        id: pip-cache
        run: |
          python -m pip install --upgrade pip
          echo "::set-output name=dir::$(pip cache dir)"

      - name: pip cache
        uses: actions/cache@v3
        with:
          path: |
            ${{ steps.pip-cache.outputs.dir }}
            ~/.cache/pre-commit
          key: ${{ runner.os }}-pip-${{ hashFiles('**/dev.txt', '**/base.txt', '.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: "5.15.2"
          setup-python: "false"
        continue-on-error: true

      - name: Install deps
        run: |
          python -m pip install -r ./requirements/dev.txt
          python -m pip install smokeshow

      - name: Build
        run: |
          python ./scripts/build.py
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

      - name: Enable cloning web app repo
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.ANKIHUB_SSH_PRIVATE_KEY }}

      - name: Checkout ankipalace/ankihub web app repo
        uses: actions/checkout@v3
        with:
          repository: ankipalace/ankihub
          ref: dev
          path: ankihub_web

      - name: Set up AnkiHub env
        run: |
          mv ${{ github.workspace }}/ankihub_web/.env.dev ${{ github.workspace }}/ankihub_web/.env

      - uses: taiki-e/install-action@just

      - name: Setup AnkiHub
        working-directory: ${{ github.workspace }}/ankihub_web
        run: |
          just pull-all-images
          docker compose run --rm django bash release.sh
          just up

      - name: Run pytest with coverage
        run: |
          pytest ./tests/addon --cov --cov-report=xml
          pytest ./tests/client --disable-vcr --cov --cov-report=xml --cov-append
          coverage html
          pytest ./tests/addon --performance -k performance -n1

      - name: Upload coverage report with smokeshow
        run: smokeshow upload coverage_html_report
        env:
          SMOKESHOW_GITHUB_STATUS_DESCRIPTION: Add-on Test Coverage {coverage-percentage}
          SMOKESHOW_GITHUB_COVERAGE_THRESHOLD: 66
          SMOKESHOW_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SMOKESHOW_GITHUB_PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}

      - name: Upload coverage to Codecov
        env:
          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false

      - name: Create ankiaddon file
        run: |
          bash ./scripts/release.sh
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

      - name: Archive .ankiaddon
        uses: actions/upload-artifact@v3
        with:
          name: ankihub_addon_${{ github.sha }}
          path: ankihub.ankiaddon

      - name: Run pre-commit
        run: pre-commit run --all

      - name: Run mypy
        run: mypy
