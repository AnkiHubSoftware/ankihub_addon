name: tests
env:
  COMPOSE_DOCKER_CLI_BUILD: 1
  WEBAPP_COMPOSE_FILE: ${{ github.workspace }}/ankihub_web/compose.yml
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  DEPLOYMENT_ENVIRONMENT: local
  PYQT_VERSION: pyqt6==6.9.1
  PYQTWEBENGINE_VERSION: pyqt6-webengine==6.8.0
  AQT_VERSION: aqt==25.7.5
on:
  push:
    branches:
      - "main"
  pull_request:

jobs:
  test-addon:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout ankihub_addon
        uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Setup addon
        uses: ./.github/actions/setup-addon
        with:
          google_api_key: ${{ secrets.GOOGLE_API_KEY }}
          install_qt: true

      - name: Run pytest with coverage
        run: |
          uv add --group tests "${{ env.AQT_VERSION }}" "${{ env.PYQT_VERSION }}" "${{ env.PYQTWEBENGINE_VERSION }}"
          uv sync --group tests
          uv run -- pytest ./tests/addon -n 1 -m sequential --cov --cov-report=xml --retries 2
          uv run -- pytest ./tests/addon -n 4 -m "not sequential and not performance" --cov --cov-report=xml --cov-append --retries 2
          uv run -- pytest ./tests/addon -n 0 -m performance --cov-report=xml --cov-append --retries 2

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage_addon_${{ env.AQT_VERSION }}
          path: .coverage
          include-hidden-files: true

      - name: Upload timeout screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: timeout-screenshots-addon-${{ env.AQT_VERSION }}
          path: test-screenshots/
          if-no-files-found: ignore


  test-client:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        group: [1, 2]
    timeout-minutes: 30
    steps:
      - name: Checkout ankihub_addon
        uses: actions/checkout@v4

      - uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Setup addon
        uses: ./.github/actions/setup-addon
        with:
          google_api_key: ${{ secrets.GOOGLE_API_KEY }}
          install_qt: true

      - name: Enable cloning web app repo
        uses: webfactory/ssh-agent@v0.5.4
        with:
          ssh-private-key: ${{ secrets.ANKIHUB_SSH_PRIVATE_KEY }}

      - name: Checkout ankipalace/ankihub web app repo
        uses: actions/checkout@v4
        with:
          repository: ankipalace/ankihub
          ref: dev
          path: ankihub_web

      - name: Set up AnkiHub env
        run: |
          mv ${{ github.workspace }}/ankihub_web/.env.dev ${{ github.workspace }}/ankihub_web/.env

      - uses: taiki-e/install-action@just

      - name: Setup AnkiHub
        working-directory: ${{ github.workspace }}/ankihub_web
        run: |
          just pull-all-images
          docker compose run --rm django bash release.sh
          just up

      - name: Run pytest with coverage
        run: |
          uv add --group tests "${{ env.AQT_VERSION }}" "${{ env.PYQT_VERSION }}" "${{ env.PYQTWEBENGINE_VERSION }}"
          uv sync --group tests
          uv run pytest ./tests/client --disable-vcr --cov --cov-report=xml \
            --splits 2 --group ${{ matrix.group }} --durations-path=tests/.test_durations

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage_client_${{ matrix.group }}
          path: .coverage
          include-hidden-files: true

      - name: Upload timeout screenshots
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: timeout-screenshots-client-${{ matrix.group }}
          path: test-screenshots/
          if-no-files-found: ignore


  coverage-and-static-checks:
    needs: ["test-addon", "test-client"]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout ankihub_addon
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Setup addon
        uses: ./.github/actions/setup-addon
        with:
          google_api_key: ${{ secrets.GOOGLE_API_KEY }}
          install_qt: false

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Run coverage
        run: |
          uv run coverage combine coverage_*/.coverage
          uv run coverage html --fail-under=76

      - name: Upload coverage report with smokeshow
        run: uv run --with smokeshow -- smokeshow upload coverage_html_report
        if: always()
        env:
          SMOKESHOW_GITHUB_STATUS_DESCRIPTION: Add-on Test Coverage {coverage-percentage}
          SMOKESHOW_GITHUB_COVERAGE_THRESHOLD: 66
          SMOKESHOW_GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SMOKESHOW_GITHUB_PR_HEAD_SHA: ${{ github.event.pull_request.head.sha }}

      - name: Upload coverage to Codecov
        if: always()
        env:
          CODECOV_TOKEN: "${{ secrets.CODECOV_TOKEN }}"
        uses: codecov/codecov-action@v1
        with:
          fail_ci_if_error: false

      - name: Create ankiaddon file
        run: |
          bash ./scripts/release.sh
        env:
          GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY }}

      - name: Archive .ankiaddon
        uses: actions/upload-artifact@v4
        with:
          name: ankihub_addon_${{ github.sha }}
          path: ankihub.ankiaddon

      - name: Run pre-commit
        run: uv run pre-commit run --all

      - name: Run mypy
        run: uv run mypy
