"""Logic for the initial steps of registering local decks with collaborative
decks for both deck creators and deck users.
"""
import json
import os
import pathlib
import re
import tempfile
import typing
import uuid
from typing import Dict

from anki.decks import DeckId
from anki.exporting import AnkiPackageExporter
from anki.notes import NoteId
from aqt import mw, qDebug
from requests import Response

from .ankihub_client import AnkiHubClient
from .constants import (
    ANKIHUB_NOTE_TYPE_FIELD_NAME,
    ANKIHUB_NOTE_TYPE_MODIFICATION_STRING,
    URL_VIEW_NOTE,
)
from .utils import get_note_types_in_deck, update_or_create_note

DIR_PATH = os.path.dirname(os.path.abspath(__file__))


def process_csv(notes: typing.List[dict]) -> None:
    """Populate the AnkiHub ID field that was added to the Note Type by
    modify_note_type."""
    for note_data in notes:
        (
            ankihub_id,
            anki_id,
            tags,
            deck,
            last_sync,
            fields,
            note_type,
            note_type_id,
        ) = note_data.values()
        # the fields column generated by parse_notes_to_csv isnâ€™t valid json
        fields = json.loads(fields.replace("'", '"'))
        tags = json.loads(tags.replace("'", '"'))
        update_or_create_note(anki_id, ankihub_id, fields, tags, note_type)
    mw.reset()


def modify_note_type(note_type_name: str) -> None:
    """Adds the AnkiHub Field to the Note Type and modifies the template to
    display the field.
    """
    qDebug(f"Modifying note type {note_type_name}")

    mm = mw.col.models
    note_type = mm.by_name(note_type_name)

    modify_fields(note_type)

    templates = note_type["tmpls"]
    for template in templates:
        modify_template(template)

    mm.update_dict(note_type)
    qDebug(f"Saved note type {note_type_name}")


def modify_fields(note_type: Dict) -> None:
    fields = note_type["flds"]
    field_names = [field["name"] for field in fields]
    if ANKIHUB_NOTE_TYPE_FIELD_NAME in field_names:
        qDebug(f"{ANKIHUB_NOTE_TYPE_FIELD_NAME} already exists.")
        return
    ankihub_field = mw.col.models.new_field(ANKIHUB_NOTE_TYPE_FIELD_NAME)
    # Put AnkiHub field last
    ankihub_field["ord"] = len(fields)
    note_type["flds"].append(ankihub_field)


def modify_template(template: Dict):
    ankihub_snippet = (
        f"<!-- BEGIN {ANKIHUB_NOTE_TYPE_MODIFICATION_STRING} -->"
        "<br>"
        f"\n{{{{#{ANKIHUB_NOTE_TYPE_FIELD_NAME}}}}}\n"
        "<a class='ankihub' "
        f"href='{URL_VIEW_NOTE}{{{{{ANKIHUB_NOTE_TYPE_FIELD_NAME}}}}}'>"
        "\nView Note on AnkiHub\n"
        "</a>"
        f"\n{{{{/{ANKIHUB_NOTE_TYPE_FIELD_NAME}}}}}\n"
        "<br>"
        f"<!-- END {ANKIHUB_NOTE_TYPE_MODIFICATION_STRING} -->"
    )

    snippet_pattern = (
        f"<!-- BEGIN {ANKIHUB_NOTE_TYPE_MODIFICATION_STRING} -->"
        "[\w\W]*"
        f"<!-- END {ANKIHUB_NOTE_TYPE_MODIFICATION_STRING} -->"
    )

    if re.search(snippet_pattern, template["afmt"]):
        qDebug(f"Template modifcation was already present, updated it")
        template["afmt"] = re.sub(
            snippet_pattern,
            ankihub_snippet,
            template["afmt"],
        )
    else:
        qDebug(f"Modified template")
        template["afmt"] += ankihub_snippet


def modify_note_types(note_types: typing.Iterable[str]):
    for note_type in note_types:
        modify_note_type(note_type)


def upload_deck(did: DeckId) -> Response:
    """Upload the deck to AnkiHub."""

    deck_name = mw.col.decks.name(did)
    exporter = AnkiPackageExporter(mw.col)
    exporter.did = did
    exporter.includeMedia = False
    exporter.includeTags = True
    deck_uuid = uuid.uuid4()
    out_dir = pathlib.Path(tempfile.mkdtemp())
    out_file = out_dir / f"{deck_name}-{deck_uuid}.apkg"
    exporter.exportInto(str(out_file))
    qDebug(f"Deck {deck_name} exported to {out_file}")
    client = AnkiHubClient()
    response = client.upload_deck(file=out_file)
    return response


def create_collaborative_deck(deck_name: str) -> Response:
    qDebug("Creating collaborative deck")
    deck_id = mw.col.decks.id(deck_name)
    model_ids = get_note_types_in_deck(deck_id)
    note_types = [mw.col.models.get(model_id) for model_id in model_ids]
    note_type_names = [note["name"] for note in note_types]
    modify_note_types(note_type_names)
    qDebug(f"Finding notes in {deck_name}")
    note_ids = list(map(NoteId, mw.col.find_notes(f"deck:{deck_name}")))
    assign_ankihub_ids(note_ids)
    response = upload_deck(deck_id)
    return response


def assign_ankihub_ids(note_ids: typing.List[NoteId]) -> None:
    """Assign UUID to notes that have an AnkiHub ID field already."""
    updated_notes = []
    qDebug(f"Assigning AnkiHub IDs to {', '.join(map(str, note_ids))}")
    for note_id in note_ids:
        note = mw.col.get_note(id=note_id)
        note[ANKIHUB_NOTE_TYPE_FIELD_NAME] = str(uuid.uuid4())
        updated_notes.append(note)
    mw.col.update_notes(updated_notes)
    qDebug(f"Updated notes: {', '.join(map(str, note_ids))}")
