"""Logic for the initial steps of registering local decks with collaborative
decks for both deck creators and deck users.
"""
import json
import os
import pathlib
import tempfile
import typing
import uuid

from anki.decks import DeckId
from anki.exporting import AnkiPackageExporter
from anki.notes import NoteId
from aqt import mw
from requests import Response

from . import LOGGER
from .addon_ankihub_client import AddonAnkiHubClient as AnkiHubClient
from .constants import ANKIHUB_NOTE_TYPE_FIELD_NAME
from .utils import (
    adjust_note_types,
    get_note_types_in_deck,
    modify_note_type,
    update_or_create_note,
)

DIR_PATH = os.path.dirname(os.path.abspath(__file__))


def process_csv(notes: typing.List[dict]) -> None:
    adjust_note_types(notes)
    for note_data in notes:
        (
            anki_id,
            deck,
            fields,
            ankihub_id,
            last_sync,
            note_type,
            note_type_id,
            tags,
        ) = note_data.values()

        # the fields column generated by parse_notes_to_csv isnâ€™t valid json
        fields = json.loads(fields)
        tags = json.loads(tags)
        update_or_create_note(int(anki_id), ankihub_id, fields, tags, note_type_id)
    mw.reset()


def modify_note_types(note_type_names: typing.Iterable[str]):
    for note_type_name in note_type_names:
        note_type = mw.col.models.by_name(note_type_name)
        modify_note_type(note_type)
        mw.col.models.update_dict(note_type)


def upload_deck(did: DeckId) -> Response:
    """Upload the deck to AnkiHub."""

    deck_name = mw.col.decks.name(did)
    exporter = AnkiPackageExporter(mw.col)
    exporter.did = did
    exporter.includeMedia = False
    exporter.includeTags = True
    deck_uuid = uuid.uuid4()
    out_dir = pathlib.Path(tempfile.mkdtemp())
    out_file = out_dir / f"{deck_name}-{deck_uuid}.apkg"
    exporter.exportInto(str(out_file))
    LOGGER.debug(f"Deck {deck_name} exported to {out_file}")
    client = AnkiHubClient()
    response = client.upload_deck(file=out_file, anki_id=did)
    return response


def create_collaborative_deck(deck_name: str) -> Response:
    LOGGER.debug("Creating collaborative deck")
    deck_id = mw.col.decks.id(deck_name)
    model_ids = get_note_types_in_deck(deck_id)
    note_types = [mw.col.models.get(model_id) for model_id in model_ids]
    note_type_names = [note["name"] for note in note_types]
    modify_note_types(note_type_names)
    LOGGER.debug(f"Finding notes in {deck_name}")
    note_ids = list(map(NoteId, mw.col.find_notes(f'deck:"{deck_name}"')))
    assign_ankihub_ids(note_ids)
    response = upload_deck(deck_id)
    return response


def assign_ankihub_ids(note_ids: typing.List[NoteId]) -> None:
    """Assign UUID to notes that have an AnkiHub ID field already."""
    updated_notes = []
    LOGGER.debug(f"Assigning AnkiHub IDs to {', '.join(map(str, note_ids))}")
    for note_id in note_ids:
        note = mw.col.get_note(id=note_id)
        note[ANKIHUB_NOTE_TYPE_FIELD_NAME] = str(uuid.uuid4())
        updated_notes.append(note)
    mw.col.update_notes(updated_notes)
    LOGGER.debug(f"Updated notes: {', '.join(map(str, note_ids))}")
